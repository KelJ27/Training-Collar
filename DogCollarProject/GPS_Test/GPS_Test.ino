// This program is for the Arduino Uno

#include <Adafruit_SSD1306.h>
#include <splash.h>

#include <Adafruit_GFX.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
#include <gfxfont.h>

#include <Wire.h>

#include "TinyGPS++.h"
#include "SoftwareSerial.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
 
#define GreenLED 12 
#define OLED_RESET 4
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//#if (SSD1306_LCDHEIGHT != 64)

//#error("Height incorrect, please fix Adafruit_SSD1306.h!");
//#endif

#define Width 25
#define Height 16

SoftwareSerial serial_connection(11, 10); // RX = pin 10 and TX = pin 11 
TinyGPSPlus gps;

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'Battery.png'
 */
#define BATTERY_WIDTH  64
#define BATTERY_HEIGHT  20

const unsigned char battery_100[] PROGMEM = {
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x87,0xE3,0xF1,0xF8,0xFC,0x7E,0x3F,0x0C,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x7F,0x8F,
  0x87,0xE3,0xF1,0xF8,0xFC,0x7E,0x3F,0x0C,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8
};

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'Battery83.png'
 */

const unsigned char battery_83[] PROGMEM = {
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x87,0xE3,0xF1,0xF8,0xFC,0x7E,0x00,0x0C,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0xFF,0x00,0x0F,
  0x87,0xE3,0xF1,0xF8,0xFC,0x7E,0x00,0x0C,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8
};

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'Battery66.png'
 */

const unsigned char battery_66[] PROGMEM = {
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x87,0xE3,0xF1,0xF8,0xFC,0x00,0x00,0x0C,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFD,0xFE,0x00,0x00,0x0F,
  0x87,0xE3,0xF1,0xF8,0xFC,0x00,0x00,0x0C,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8
};

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'Battery50.png'
 */

const unsigned char battery_50[] PROGMEM = {
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x87,0xE3,0xF1,0xF8,0x00,0x00,0x00,0x0C,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xFB,0xFC,0x00,0x00,0x00,0x0F,
  0x87,0xE3,0xF1,0xF8,0x00,0x00,0x00,0x0C,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8
};

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'Battery33.png'
 */

const unsigned char battery_33[] PROGMEM = {
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x87,0xE3,0xF0,0x00,0x00,0x00,0x00,0x0C,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF7,0xF8,0x00,0x00,0x00,0x00,0x0F,
  0x87,0xE3,0xF0,0x00,0x00,0x00,0x00,0x0C,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8
};

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'Battery16.png'
 */
 
const unsigned char battery_16[] PROGMEM = {
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x87,0xE0,0x00,0x00,0x00,0x00,0x00,0x0C,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x8F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x87,0xE0,0x00,0x00,0x00,0x00,0x00,0x0C,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8
};

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'Battery0.png'
 */
 
const unsigned char battery_0[] PROGMEM = {
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
  0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,
  0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,
  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8
};

int analogValue;
const float vpp = 0.0043988269794721407624633431085;
float batteryVoltage;
float maxBatteryLife = 9.50;

void setup() {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  //try 0x7A
  Serial.begin(9600);
  serial_connection.begin(9600);
  Serial.println("GPS Start");
  pinMode(GreenLED, OUTPUT);
  display.clearDisplay();
  display.display();
}


void loop() {
  runGPS();
  drawBattery(batteryLife());
}

void runGPS()
{
  while(serial_connection.available())
  {
    gps.encode(serial_connection.read());
  }
  if(gps.location.isUpdated())
  {
    // Get GPS location data
    digitalWrite(GreenLED, HIGH);
    Serial.println("Satellite Count:");
    Serial.println(gps.satellites.value());
    Serial.println("Latitude:");
    Serial.println(gps.location.lat(), 6);
    Serial.println("Longitude:");
    Serial.println(gps.location.lng(), 6);
    Serial.println("Speed MPH:");
    Serial.println(gps.speed.mph());
    Serial.println("Altitude Feet:");
    Serial.println(gps.altitude.feet());
    Serial.println("");
    delay(15000);
    digitalWrite(GreenLED, LOW);
  }
  else
  {
    Serial.println("GPS is not connected");
    delay(15000);
  }
}

void drawBattery(float batteryLife)
{
  if(batteryLife <= maxBatteryLife && batteryLife >= 9.00)
  {
    display.clearDisplay();
    //display.drawPixel(15, 10, WHITE);
    display.drawBitmap(35, 8, battery_100, BATTERY_WIDTH,BATTERY_HEIGHT, WHITE);
    display.display();
  }
  else if(batteryLife < 9.00 && batteryLife >= 8.00)
  {
    display.clearDisplay();
    //display.drawPixel(15, 10, WHITE);
    display.drawBitmap(35, 8, battery_83, BATTERY_WIDTH,BATTERY_HEIGHT, WHITE);
    display.display(); 
  }
  else if(batteryLife < 8.00 && batteryLife >= 7.00)
  {
    display.clearDisplay();
    //display.drawPixel(15, 10, WHITE);
    display.drawBitmap(35, 8, battery_66, BATTERY_WIDTH,BATTERY_HEIGHT, WHITE);
    display.display();
  }
  else if(batteryLife < 7.00 && batteryLife >= 6.00)
  {
    display.clearDisplay();
    //display.drawPixel(15, 10, WHITE);
    display.drawBitmap(35, 8, battery_50, BATTERY_WIDTH,BATTERY_HEIGHT, WHITE);
    display.display();
  }
  else if(batteryLife < 6.00 && batteryLife >= 5.30)
  {
    display.clearDisplay();
    //display.drawPixel(15, 10, WHITE);
    display.drawBitmap(35, 8, battery_33, BATTERY_WIDTH,BATTERY_HEIGHT, WHITE);
    display.display();
  }
  else if(batteryLife < 5.30 && batteryLife >= 5.00)
  {
    display.clearDisplay();
    //display.drawPixel(15, 10, WHITE);
    display.drawBitmap(35, 8, battery_16, BATTERY_WIDTH,BATTERY_HEIGHT, WHITE);
    display.display();
  }
  else
  {
    display.clearDisplay();
    //display.drawPixel(15, 10, WHITE);
    display.drawBitmap(35, 8, battery_0, BATTERY_WIDTH,BATTERY_HEIGHT, WHITE);
    display.display();
  }
}

float batteryLife()
{
  analogValue = analogRead(A0);
  batteryVoltage = (analogValue * vpp) * 2;
  //Serial.println(batteryVoltage);

  return batteryVoltage;
}
